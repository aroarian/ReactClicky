{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","images","score","topScore","gameEnd","array","i","length","clicked","shuffleArray","j","Math","floor","random","_ref","handleImgClick","id","imageClicked","_this","filter","image","alert","setState","this","_this2","displayImages","map","eachItem","index","react_default","a","createElement","alt","onClick","key","src","photo","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qvBAmFeA,6MA9EbC,MAAQ,CACNC,OAAQA,EACRC,MAAO,EACPC,SAAU,KAGZC,QAAU,SAAAC,GACR,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAChCD,EAAMC,GAAGE,SAAU,KAIvBC,aAAe,SAAAJ,GACb,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAII,EAAIC,KAAKC,MAAMD,KAAKE,UAAYP,EAAI,IADCQ,EAElB,CAACT,EAAMK,GAAIL,EAAMC,IAAvCD,EAAMC,GAFkCQ,EAAA,GAE9BT,EAAMK,GAFwBI,EAAA,GAI3C,OAAOT,KAOTU,eAAiB,SAAAC,GACf,IACMC,EADQC,EAAKlB,MAAMC,OACEkB,OAAO,SAAAC,GAAK,OAAIA,EAAMJ,KAAOA,KAExB,IAA5BC,EAAa,GAAGT,SAClBa,MAAM,cACNH,EAAKd,QAAQH,GACbiB,EAAKT,aAAaR,GAClBiB,EAAKI,SAAS,CAAErB,OAAQiB,EAAKlB,MAAMC,OAAQC,MAAO,MAElDe,EAAa,GAAGT,SAAU,EAC1BU,EAAKlB,MAAME,MAAQgB,EAAKlB,MAAME,MAAQ,EACtCgB,EAAKT,aAAaR,GAClBiB,EAAKI,SAAS,CAAErB,OAAQiB,EAAKlB,MAAMC,UAGjCiB,EAAKlB,MAAME,OAASgB,EAAKlB,MAAMG,UACjCe,EAAKI,SAAS,CAAEnB,SAAUe,EAAKlB,MAAME,QAGX,KAAxBgB,EAAKlB,MAAMG,WACbkB,MAAM,YACNH,EAAKI,SAAS,CAAEpB,MAAO,EAAGC,SAAU,0FAzBtCoB,KAAKd,aAAaR,oCA4BX,IAAAuB,EAAAD,KACDE,EAAgBF,KAAKvB,MAAMC,OAAOyB,IAAI,SAACC,EAAUC,GAAX,OAC1CC,EAAAC,EAAAC,cAAA,OACEC,IAAI,YACJC,QAAS,kBAAMT,EAAKT,eAAeY,EAASX,KAC5CkB,IAAKN,EACLO,IAAKR,EAASS,UAIlB,OACEP,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OAEbR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,WACXR,EAAAC,EAAAC,cAAA,yBACFF,EAAAC,EAAAC,cAAA,OAAKM,UAAU,UACbR,EAAAC,EAAAC,cAAA,OAAKf,GAAG,SAAR,UAAwBO,KAAKvB,MAAME,OACnC2B,EAAAC,EAAAC,cAAA,OAAKf,GAAG,YAAR,aAA8BO,KAAKvB,MAAMG,aAI/C0B,EAAAC,EAAAC,cAAA,OAAKf,GAAG,SAAR,6BACAa,EAAAC,EAAAC,cAAA,OAAKM,UAAU,UAAUZ,WAzEfa,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e11ea730.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport images from \"./images.json\";\n\nclass App extends React.Component {\n  state = {\n    images: images,\n    score: 0,\n    topScore: 0\n  };\n\n  gameEnd = array => {\n    for (let i = 0; i < array.length; i++) {\n      array[i].clicked = false;\n    }\n  };\n\n  shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n\n  componentWillMount() {\n    this.shuffleArray(images);\n  }\n\n  handleImgClick = id => {\n    const image = this.state.images;\n    const imageClicked = image.filter(image => image.id === id);\n\n    if (imageClicked[0].clicked === true) {\n      alert(\"Game Over!\");\n      this.gameEnd(images);\n      this.shuffleArray(images);\n      this.setState({ images: this.state.images, score: 0 });\n    } else {\n      imageClicked[0].clicked = true;\n      this.state.score = this.state.score + 1;\n      this.shuffleArray(images);\n      this.setState({ images: this.state.images });\n    }\n\n    if (this.state.score >= this.state.topScore) {\n      this.setState({ topScore: this.state.score });\n    }\n\n    if (this.state.topScore === 12) {\n      alert(\"You Win!\");\n      this.setState({ score: 0, topScore: 0 });\n    }\n  };\n  render() {\n    const displayImages = this.state.images.map((eachItem, index) => (\n      <img\n        alt=\"click me!\"\n        onClick={() => this.handleImgClick(eachItem.id)}\n        key={index}\n        src={eachItem.photo}\n      />\n    ));\n\n    return (\n      <div className=\"App\">\n        <nav className=\"nav\">\n        \n          <div className=\"content\">\n              <h3>ClickyGame!</h3>\n            <div className=\"scores\">\n              <div id=\"score\">Score: {this.state.score}</div>\n              <div id=\"topscore\">TopScore: {this.state.topScore}</div>\n            </div>\n          </div>\n        </nav>\n        <div id=\"rules\">Click an images to begin!</div>\n        <div className=\"images\">{displayImages}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}